<?php

/**
 * @file
 * Contains commerce_currency_resolver.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\commerce_currency_resolver\Event\CommerceCurrencyResolverEvents;
use Drupal\commerce_currency_resolver\Event\ExchangeImport;
use Drupal\Core\Entity\EntityInterface;

/**
 * Implements hook_help().
 */
function commerce_currency_resolver_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the commerce_currency_resolver module.
    case 'help.page.commerce_currency_resolver':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Commerce 2 currency support') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_entity_build_defaults_alter().
 */
function commerce_currency_resolver_entity_view_alter(array &$build, EntityInterface $entity, $view_mode) {

  // Check enabled source. We use cache context only for cookie based
  // currency switch.
  $source = \Drupal::config('commerce_currency_resolver.settings')->get('currency_mapping');

  // Add our cache context.
  if ($source === 'cookie' && (isset($build['#commerce_product']) || isset($build['#commerce_product_variation']))) {
    $build['#cache']['contexts'][] = 'currency_resolver';
  }
}

/**
 * Implements hook_cron().
 */
function commerce_currency_resolver_cron() {

  // Get last time when import was done.
  $last_update = \Drupal::state()
    ->get('commerce_currency_resolver.last_update_time');

  // Get how much often cron should be running.
  $cron = \Drupal::config('commerce_currency_resolver.currency_conversion')
    ->get('cron');

  // Check if is needed to update currency.
  if (time() < ($last_update - $cron)) {
    // Get which service exchange rate is used.
    $service = str_replace(' ', '_', \Drupal::config('commerce_currency_resolver.currency_conversion')
      ->get('source'));

    // Start and dispatch event.
    $event = new ExchangeImport($service);
    \Drupal::service('event_dispatcher')->dispatch(CommerceCurrencyResolverEvents::IMPORT, $event);
  }

}
